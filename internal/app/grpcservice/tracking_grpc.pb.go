// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: tracking.proto

package trackingService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackingClient is the client API for Tracking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackingClient interface {
	PostTracking(ctx context.Context, in *PostTrackingRequest, opts ...grpc.CallOption) (*PostTrackingResponse, error)
	GetResult(ctx context.Context, in *GetTrackingID, opts ...grpc.CallOption) (*GetTrackingResponse, error)
}

type trackingClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackingClient(cc grpc.ClientConnInterface) TrackingClient {
	return &trackingClient{cc}
}

func (c *trackingClient) PostTracking(ctx context.Context, in *PostTrackingRequest, opts ...grpc.CallOption) (*PostTrackingResponse, error) {
	out := new(PostTrackingResponse)
	err := c.cc.Invoke(ctx, "/tracking.Tracking/PostTracking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingClient) GetResult(ctx context.Context, in *GetTrackingID, opts ...grpc.CallOption) (*GetTrackingResponse, error) {
	out := new(GetTrackingResponse)
	err := c.cc.Invoke(ctx, "/tracking.Tracking/GetResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackingServer is the server API for Tracking service.
// All implementations must embed UnimplementedTrackingServer
// for forward compatibility
type TrackingServer interface {
	PostTracking(context.Context, *PostTrackingRequest) (*PostTrackingResponse, error)
	GetResult(context.Context, *GetTrackingID) (*GetTrackingResponse, error)
	mustEmbedUnimplementedTrackingServer()
}

// UnimplementedTrackingServer must be embedded to have forward compatible implementations.
type UnimplementedTrackingServer struct {
}

func (UnimplementedTrackingServer) PostTracking(context.Context, *PostTrackingRequest) (*PostTrackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTracking not implemented")
}
func (UnimplementedTrackingServer) GetResult(context.Context, *GetTrackingID) (*GetTrackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedTrackingServer) mustEmbedUnimplementedTrackingServer() {}

// UnsafeTrackingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackingServer will
// result in compilation errors.
type UnsafeTrackingServer interface {
	mustEmbedUnimplementedTrackingServer()
}

func RegisterTrackingServer(s grpc.ServiceRegistrar, srv TrackingServer) {
	s.RegisterService(&Tracking_ServiceDesc, srv)
}

func _Tracking_PostTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServer).PostTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracking/PostTracking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServer).PostTracking(ctx, req.(*PostTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracking_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackingID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.Tracking/GetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServer).GetResult(ctx, req.(*GetTrackingID))
	}
	return interceptor(ctx, in, info, handler)
}

// Tracking_ServiceDesc is the grpc.ServiceDesc for Tracking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tracking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracking.Tracking",
	HandlerType: (*TrackingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostTracking",
			Handler:    _Tracking_PostTracking_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _Tracking_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracking.proto",
}
