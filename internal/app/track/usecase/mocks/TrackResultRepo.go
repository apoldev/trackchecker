// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	models "github.com/apoldev/trackchecker/internal/app/models"
	mock "github.com/stretchr/testify/mock"
)

// TrackResultRepo is an autogenerated mock type for the TrackResultRepo type
type TrackResultRepo struct {
	mock.Mock
}

// Get provides a mock function with given fields: requestID
func (_m *TrackResultRepo) Get(requestID string) ([]*models.Crawler, error) {
	ret := _m.Called(requestID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []*models.Crawler
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.Crawler, error)); ok {
		return rf(requestID)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.Crawler); ok {
		r0 = rf(requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Crawler)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: track, crawler
func (_m *TrackResultRepo) Set(track *models.TrackingNumber, crawler *models.Crawler) error {
	ret := _m.Called(track, crawler)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.TrackingNumber, *models.Crawler) error); ok {
		r0 = rf(track, crawler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTrackResultRepo creates a new instance of TrackResultRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTrackResultRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TrackResultRepo {
	mock := &TrackResultRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
